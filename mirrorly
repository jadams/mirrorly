#!/bin/bash
set -Eeuo pipefail
umask 022

REDO=0

cleanup()
{
    if [ -z "${TMP_DIR-}" ]; then
        return
    fi
    if [ "${RC}" = "0" ]; then
        mv "${TMP_DIR}/current-Sizes" "${MIRROR_DIR}/SIZES" 2>/dev/null || true
        mv "${TMP_DIR}/pool-MD5sums" "${MIRROR_DIR}/MD5SUMS" 2>/dev/null || true
    fi
    rm "${TMP_DIR}"/*-Packages 2>/dev/null || true
    rm "${TMP_DIR}"/*-Release 2>/dev/null || true
    rm "${TMP_DIR}"/*-Sizes 2>/dev/null || true
    rm "${TMP_DIR}"/*-MD5sums 2>/dev/null || true
}

trap_handler()
{
    RC="$?"
    trap - ERR TERM HUP INT QUIT EXIT
    cleanup
    case "${RC}" in
        "0")
            echo Mirror sync successful
            ;;
        "1")
            echo Requirements not met 1>&2
            ;;
        "2")
            echo Permissions error 1>&2
            ;;
        "3")
            echo Error in mirrorly.conf 1>&2
            ;;
        "4")
            echo Exit code not defined 1>&2
            ;;
        "5")
            echo Missing MD5SUMS 1>&2
            ;;
        "6")
            echo Error downloading pool files 1>&2
            ;;
        "7")
            echo Error downloading dist files 1>&2
            ;;
        "8")
            echo Error downloading release files 1>&2
            ;;
        "254")
            echo Ran out of retry attempts 1>&2
            ;;
        *)
            echo Unknown error 1>&2
            ;;
    esac
    exit "${RC}"
}

test_req()
{
    reqs=(awk bash cat curl cut dirname echo find gunzip head md5sum mkdir parallel paste rm sort touch tr uniq wc)
    for req in "${reqs[@]}"; do
        if ! command -v "${req}" &>/dev/null; then echo "${req}" not installed 1>&2; exit 1; fi
    done
    if ! readarray < /dev/null; then
        echo "bash does not support readarray" 1>&2; exit 1
    fi
    if [ "$(awk -V | head -1 | cut -d' ' -f1)" != "GNU" ]; then
        echo "awk is not GNU awk" 1>&2; exit 1
    fi
}

include()
{
    if [ -f mirrorly.conf ]; then
        . mirrorly.conf
    elif [ -f /etc/mirrorly.conf ]; then
        . /etc/mirrorly.conf
    else
        echo "can't find mirrorly.conf in ${PWD} or /etc" 2>&1
    fi
}

setup_dirs()
{
    mkdir -p "${TMP_DIR}" || exit 2
    mkdir -p "${MIRROR_DIR}" || exit 2
    touch "${MIRROR_DIR}/testfile" 2>/dev/null || (echo cannot write to "${MIRROR_DIR}" 1>&2; exit 2) && rm "${MIRROR_DIR}/testfile"
    touch "${TMP_DIR}/testfile" 2>/dev/null || (echo cannot write to "${TMP_DIR}" 1>&2; exit 2) && rm "${TMP_DIR}/testfile"
}

usage()
{
    echo "Usage: ${0} [-h] this help message
                  [-1] only run stage 1
                  [-2] only run stage 2
                  [-c] check MD5sums of all files"
    trap - ERR TERM HUP INT QUIT EXIT
    exit 0
}

get_mirrors_from_list()
{
    readarray -t MIRROR_LIST < "${MIRROR_LIST_FILE}"
    MIRROR_LIST_LEN="${#MIRROR_LIST[@]}"
    DISTROS=()
    for MIRROR in "${MIRROR_LIST[@]}"; do
        local CURRENT_MIRROR
        IFS=" " read -r -a CURRENT_MIRROR <<< "${MIRROR}"
        local CURRENT_MIRROR_DISTRO="${CURRENT_MIRROR[1]##*\/}"
        DISTROS+=("${CURRENT_MIRROR_DISTRO}")
    done
    IFS=" " read -r -a DISTROS <<< "$(echo "${DISTROS[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')"
}

get_package_file_list()
{
    local i
    for (( i=0; i<MIRROR_LIST_LEN; i++ )); do
        local CURRENT_MIRROR
        IFS=" " read -r -a CURRENT_MIRROR <<< "${MIRROR_LIST[$i]}"
        local CURRENT_MIRROR_LEN="${#CURRENT_MIRROR[@]}"
        local CURRENT_MIRROR_DISTRO="${CURRENT_MIRROR[1]##*\/}"
        if [ "${CURRENT_MIRROR[0]}" != "deb" ]; then
            echo ERROR in "${CURRENT_MIRROR[@]}" 1>&2
            exit 3
        else
            echo -n "  ${CURRENT_MIRROR[1]} ${CURRENT_MIRROR[2]} "
        fi
        curl --retry "${NUM_RETRIES}" -fsSL -o "${TMP_DIR}/${CURRENT_MIRROR[2]}-Release" "${CURRENT_MIRROR[1]}/dists/${CURRENT_MIRROR[2]}/Release"
        PACKAGE_FILES=()
        local j
        for (( j=3; j<"${CURRENT_MIRROR_LEN}"; j++ )); do
            CURRENT_MIRROR_J_TR=$(echo "${CURRENT_MIRROR[$j]}" | tr '/' '-')
            CURRENT_MIRROR_PACKAGE_FILE="${CURRENT_MIRROR_DISTRO}-${CURRENT_MIRROR[2]}-${CURRENT_MIRROR_J_TR}-Packages"
            echo -n "${CURRENT_MIRROR[$j]} "
            curl --retry "${NUM_RETRIES}" -fsSL "${CURRENT_MIRROR[1]}/dists/${CURRENT_MIRROR[2]}/${CURRENT_MIRROR[$j]}/binary-${ARCH}/Packages.gz" | gunzip > "${TMP_DIR}/${CURRENT_MIRROR_PACKAGE_FILE}"
            PACKAGE_FILES+=("${CURRENT_MIRROR_PACKAGE_FILE}")
        done
        echo
        for PACKAGE_FILENAME in "${PACKAGE_FILES[@]}"; do
            paste <(awk '/^Size. /{print $2}' "${TMP_DIR}/${PACKAGE_FILENAME}") <(awk -v url="${CURRENT_MIRROR[1]}" -v distro="${CURRENT_MIRROR_DISTRO}" '/^Filename. /{print url"\t"distro"\t"$2}' "${TMP_DIR}/${PACKAGE_FILENAME}") >> "${TMP_DIR}/pool-TMP-Sizes"
            paste <(awk '/^MD5sum. /{print $2}' "${TMP_DIR}/${PACKAGE_FILENAME}") <(awk -v distro="${CURRENT_MIRROR_DISTRO}" '/^Filename. /{print distro"/"$2}' "${TMP_DIR}/${PACKAGE_FILENAME}") >> "${TMP_DIR}/pool-TMP-MD5sums"
        done
    done
    sort -k2 "${TMP_DIR}/pool-TMP-Sizes" | uniq > "${TMP_DIR}/pool-Sizes" && rm "${TMP_DIR}/pool-TMP-Sizes"
    sort -k2 "${TMP_DIR}/pool-TMP-MD5sums" | uniq > "${TMP_DIR}/pool-MD5sums" && rm "${TMP_DIR}/pool-TMP-MD5sums"
}

get_local_file_list()
{
    if [ -f "${MIRROR_DIR}/SIZES" ]; then
        mv "${MIRROR_DIR}/SIZES" "${TMP_DIR}/file-Sizes"
    else
        for DISTRO in "${DISTROS[@]}"; do
            echo "  ${MIRROR_DIR}/${DISTRO}"
            if [ -d "${MIRROR_DIR}/${DISTRO}/pool" ]; then
                (cd "${MIRROR_DIR}" && find "${DISTRO}/pool" -type f -ls | awk '{print $7"\t"$11}' >> "${TMP_DIR}/find-TMP-Sizes")
            else
                touch "${TMP_DIR}/find-TMP-Sizes"
            fi
        done
        sort -k2 "${TMP_DIR}/find-TMP-Sizes" | uniq > "${TMP_DIR}/file-Sizes" && rm "${TMP_DIR}/find-TMP-Sizes"
    fi
}

get_file_from_repo()
{
    local SIZE="${1}"
    local MIRROR="${2}"
    local DISTRO="${3}"
    local FILENAME="${4}"
    local MD5SUM="${5}"
    local OUTPUT="${MIRROR_DIR}/${DISTRO}/${FILENAME}"
    local URL="${MIRROR}/${FILENAME}"
    local STAT=0
    if [ ! -f "${OUTPUT}" ]; then
        mkdir -p "$(dirname "${OUTPUT}")"
        if [ "$(curl -fsL -w "%{http_code}" -o "${OUTPUT}" "${URL}")" = "404" ]; then
            exit 0
        fi
    fi
    STAT=$(stat -c %s "${OUTPUT}" 2>/dev/null || echo "0")
    if [ "${STAT}" -ne "${SIZE}" ]; then
        rm "${OUTPUT}" 2>/dev/null
        exit 1
    fi
    if [ -n "${MD5SUM}" ]; then
        DL_MD5SUM=$(md5sum "${OUTPUT}" 2>/dev/null | cut -d' ' -f1)
        if [ "${MD5SUM}" != "${DL_MD5SUM}" ]; then
            rm "${OUTPUT}" 2>/dev/null
            exit 2
        fi
    fi
    exit 0
}

get_release_files()
{
    local i
    for (( i=0; i<MIRROR_LIST_LEN; i++ )); do
        local CURRENT_MIRROR
        IFS=" " read -r -a CURRENT_MIRROR <<< "${MIRROR_LIST[$i]}"
        local CURRENT_MIRROR_LEN="${#CURRENT_MIRROR[@]}"
        local CURRENT_MIRROR_DISTRO="${CURRENT_MIRROR[1]##*\/}"
        local RELEASE_FILES=(InRelease Release Release.gpg)
        echo -n "  ${CURRENT_MIRROR[1]} ${CURRENT_MIRROR[2]} "
        for FILE in "${RELEASE_FILES[@]}"; do
            local URL="${CURRENT_MIRROR[1]}/dists/${CURRENT_MIRROR[2]}/${FILE}"
            local OUTPUT="${MIRROR_DIR}/${CURRENT_MIRROR_DISTRO}/dists/${CURRENT_MIRROR[2]}/${FILE}"
            mkdir -p "$(dirname "${OUTPUT}")" || exit 2
            curl --retry-connrefused --retry "${NUM_RETRIES}" -fsSL -o "${OUTPUT}" "${URL}" || exit 8
        done
        local EXCLUDE=""
        EXCLUDE=$(awk -v arch="${ARCH}" '/Architectures/ {for (i=2; i<NF; i++) if ($i!=arch) printf $i "|"; print $NF}' "${MIRROR_DIR}/${CURRENT_MIRROR_DISTRO}/dists/${CURRENT_MIRROR[2]}/Release")
        awk -v excl="${EXCLUDE}" -v url="${CURRENT_MIRROR[1]}" -v distro="${CURRENT_MIRROR_DISTRO}" -v rel="${CURRENT_MIRROR[2]}" '/MD5/{flag=1;next}/SHA1/{flag=0}flag && $0 !~ excl {print $2"\t"url"\t"distro"\tdists/"rel"/"$3"\t"$1}' "${MIRROR_DIR}/${CURRENT_MIRROR_DISTRO}/dists/${CURRENT_MIRROR[2]}/Release" >> "${TMP_DIR}/dists-MD5sums"
        if ! cmp -s "${MIRROR_DIR}/${CURRENT_MIRROR_DISTRO}/dists/${CURRENT_MIRROR[2]}/Release" "${TMP_DIR}/${CURRENT_MIRROR[2]}-Release"; then ((REDO++)); fi
        echo
    done
}

check_md5sums()
{
    if [ -f "${MIRROR_DIR}/MD5SUMS" ]; then
        (cd "${MIRROR_DIR}"; parallel 'echo {} | md5sum --check --quiet' :::: MD5SUMS)
    else
        echo "${MIRROR_DIR}/MD5SUMS does not exist, please do a successful sync first" 1>&2
        exit 5
    fi
}

stage0()
{
    test_req
    include
    setup_dirs
    get_mirrors_from_list
}

stage1a()
{
    echo "Collecting package indices..."
    get_package_file_list

    echo "Checking local files..."
    get_local_file_list
}

stage1b()
{
    echo "Sorting list of files to download..."
    if [ "$(wc -l "${TMP_DIR}/file-Sizes" | cut -d' ' -f1)" = "0" ]; then
        cat "${TMP_DIR}/pool-Sizes" > "${TMP_DIR}/need-to-download"
    else
        awk -F'\t' 'FNR==NR {a[$2]=$1; next} !($3"/"$4 in a) || a[$3"/"$4] != $1' "${TMP_DIR}/file-Sizes" "${TMP_DIR}/pool-Sizes" > "${TMP_DIR}/need-to-download"
    fi

    local NUM_DOWNLOAD_FILES=0
    NUM_DOWNLOAD_FILES="$(wc -l "${TMP_DIR}/need-to-download" | cut -d' ' -f1 | tr -d '\n')"
    if [ "${NUM_DOWNLOAD_FILES}" = "0" ]; then
        echo "No files to download"
        sort -k2 "${TMP_DIR}/file-Sizes" | uniq > "${TMP_DIR}/combined-Sizes"
    else
        echo "Downloading ${NUM_DOWNLOAD_FILES} files..."
        export MIRROR_DIR
        export TMP_DIR
        export -f get_file_from_repo
        parallel \
            --arg-file "${TMP_DIR}"/need-to-download \
            --colsep '\t' \
            --retries "${NUM_RETRIES}" \
            --joblog "${TMP_DIR}"/download-joblog \
            --jobs "${DL_JOBS}" \
            --bar \
            get_file_from_repo || exit 6
        awk '{print $1"\t"$3"/"$4}' "${TMP_DIR}/need-to-download" | sort -k2 "${TMP_DIR}/file-Sizes" - | uniq > "${TMP_DIR}/combined-Sizes"
    fi
}

stage1()
{
    stage1a
    stage1b
}

stage2a()
{
    echo "Getting dist files..."
    get_release_files

    local NUM_DIST_FILES=0
    NUM_DIST_FILES="$(wc -l "${TMP_DIR}/dists-MD5sums" | cut -d' ' -f1 | tr -d '\n')"
    echo "Checking or downloading ${NUM_DIST_FILES} files..."
    export MIRROR_DIR
    export TMP_DIR
    export -f get_file_from_repo
    parallel \
        --arg-file "${TMP_DIR}"/dists-MD5sums \
        --colsep '\t' \
        --retries "${NUM_RETRIES}" \
        --joblog "${TMP_DIR}"/dist-joblog \
        --jobs "${DL_JOBS}" \
        --bar \
        get_file_from_repo || exit 7
}

stage2b()
{
    echo "Sorting list of files to remove..."
    awk -F'\t' 'FNR==NR {a[$3"/"$4]=$1; next} !($2 in a) || a[$2] != $1' "${TMP_DIR}/pool-Sizes" "${TMP_DIR}/file-Sizes" > "${TMP_DIR}/need-to-remove"

    local NUM_DELETE_FILES=0
    NUM_DELETE_FILES="$(wc -l "${TMP_DIR}/need-to-remove" | cut -d' ' -f1 | tr -d '\n')"
    if [ "${NUM_DELETE_FILES}" = "0" ]; then
        echo "No files to remove"
        if [ -f "${TMP_DIR}/combined-Sizes" ]; then
            cat "${TMP_DIR}/combined-Sizes" > "${TMP_DIR}/current-Sizes"
        fi
    else
        echo "Removing ${NUM_DELETE_FILES} files..."
        export MIRROR_DIR
        parallel \
            --arg-file "${TMP_DIR}"/need-to-remove \
            --colsep '\t' \
            --retries "${NUM_RETRIES}" \
            --joblog "${TMP_DIR}"/remove-joblog \
            --jobs "${DL_JOBS}" \
            --bar \
            rm "${MIRROR_DIR}/{2}"
        awk 'NR==FNR{del[$0];next} !($0 in del)' "${TMP_DIR}/need-to-remove" "${TMP_DIR}/combined-Sizes" > "${TMP_DIR}/current-Sizes"
    fi
}

stage2(){
    stage2a
    stage2b
}

run_stages()
{
    for STAGE in "${STAGES[@]}"; do
        "${STAGE}"
    done
}

main()
{
    trap trap_handler EXIT TERM HUP INT QUIT
    STAGES=(stage0)
    if [ "${1-}" = "-h" ]; then
        STAGES=(usage)
    elif [ "${1-}" = "-c" ]; then
        STAGES+=(check_md5sums)
    elif [ "${1-}" = "-1" ]; then
        STAGES+=(stage1)
    elif [ "${1-}" = "-2" ]; then
        STAGES+=(stage1a stage2)
    else
        STAGES+=(stage1 stage2)
    fi
    run_stages
    if [ "${REDO}" != "0" ]; then
        if (( REDO > NUM_RETRIES )); then
            echo "Tried ${NUM_RETRIES} times, giving up" 1>&2
            exit 254
        fi
        echo Release file has changed, rerunning...
        cleanup
        main "$@"
    fi
}

main "$@"
